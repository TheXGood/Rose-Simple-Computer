$date
	Wed Mar 09 15:57:20 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module toplevel $end
$var reg 1 ! clk $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 16 " ip_val [15:0] $end
$scope module IP $end
$var wire 1 # clear $end
$var wire 1 ! clk $end
$var wire 16 $ in [15:0] $end
$var wire 16 % val [15:0] $end
$var wire 1 & write $end
$var reg 16 ' rval [15:0] $end
$upscope $end
$scope module alu $end
$var wire 16 ( A [15:0] $end
$var wire 16 ) B [15:0] $end
$var wire 1 * clk $end
$var wire 3 + op [2:0] $end
$var reg 16 , Output [15:0] $end
$var reg 16 - RNG_out [15:0] $end
$var reg 1 . zero $end
$upscope $end
$scope module registers $end
$var wire 3 / addr1 [2:0] $end
$var wire 3 0 addr2 [2:0] $end
$var wire 1 1 clear $end
$var wire 1 ! clk $end
$var wire 16 2 in [15:0] $end
$var wire 3 3 inaddr [2:0] $end
$var wire 1 4 write $end
$var reg 16 5 out1 [15:0] $end
$var reg 16 6 out2 [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 6
bx 5
z4
bz 3
bz 2
z1
bz 0
bz /
x.
bx -
bx ,
bz +
z*
bz )
bz (
bx '
1&
bx %
bx $
z#
bx "
0!
$end
#50000
1!
#100000
0!
#150000
1!
#200000
0!
